apiVersion: apps/v1
kind: Deployment
metadata:
  name: userdatasample

  labels:
    app: userdatasample

spec:
  replicas: 2  # You can adjust this based on your scaling needs
  selector:
    matchLabels:
      app: userdatasample

  template:
    metadata:
      labels:
        app: userdatasample

    spec:
      # imagePullSecrets:
      # - name: regcred  # Ensure you have created this secret
      containers:
        - name: userdatasample
          image: gcr.io/innov-htfr-0mhe-1/userdatasample # Update this with your container image
          ports:
            - containerPort: 8080
          # env:
          #   - name: SPRING_DATASOURCE_URL
          #     value: jdbc:mysql://127.0.0.1:3306/[your-database-name]
          #   - name: SPRING_DATASOURCE_USERNAME
          #     valueFrom:
          #       secretKeyRef:
          #         name: db-credentials
          #         key: username
          #   - name: SPRING_DATASOURCE_PASSWORD
          #     valueFrom:
          #       secretKeyRef:
          #         name: db-credentials
          #         key: password
        # Cloud SQL Proxy container
      #   - name: cloudsql-proxy
      #     image: gcr.io/cloudsql-docker/gce-proxy:1.19.1
      #     command: ["/cloud_sql_proxy", 
      #               "-instances=[your-project-id]:[region]:[instance-id]=tcp:3306"]
      #     securityContext:
      #       runAsUser: 2  # non-root user
      #       allowPrivilegeEscalation: false
      #     volumeMounts:
      #       - name: service-account
      #         mountPath: /secrets
      #         readOnly: true
      # volumes:
      #   - name: service-account
      #     secret:
      #       secretName: gcp-sa
---
apiVersion: v1
kind: Service
metadata:
  name: internal-lb-service
  namespace: default
  annotations:
    cloud.google.com/load-balancer-type: "Internal"
spec:
  type: LoadBalancer
 # loadBalancerIP: [STATIC_INTERNAL_IP]   # Optional: Pre-allocate a static internal IP
  selector:
    app: userdatasample
  ports:
  - protocol: TCP
    port: 80        # External port (Load Balancer)
    targetPort: 8080 # Internal service port on the Pods

